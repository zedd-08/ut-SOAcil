{
	"info": {
		"_postman_id": "39b6397a-3511-4cf0-8e61-920f6c6e2a78",
		"name": "SOA-cil",
		"description": "There are currently 4 backend services in the project, each one of them in their own folders. These services together make the application work.\n\n*   Authentication service\n*   Notification service\n*   Post service\n*   User service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user-service",
			"item": [
				{
					"name": "all",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user-service-endpoint}}/all",
							"host": [
								"{{user-service-endpoint}}"
							],
							"path": [
								"all"
							]
						},
						"description": "Get all users on the platform"
					},
					"response": []
				},
				{
					"name": "create",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_handle\": \"username123\",\r\n  \"firstName\": \"FirstName\",\r\n  \"lastName\": \"LastName\",\r\n  \"password\": \"password123\",\r\n  \"bio\": \"This is a sample user bio\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user-service-endpoint}}/create",
							"host": [
								"{{user-service-endpoint}}"
							],
							"path": [
								"create"
							]
						},
						"description": "Create a new user with details in JSON payload."
					},
					"response": []
				},
				{
					"name": "user",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user-service-endpoint}}/1",
							"host": [
								"{{user-service-endpoint}}"
							],
							"path": [
								"1"
							]
						},
						"description": "Get details of user with ID supplied as path variable `/{userId}`"
					},
					"response": []
				},
				{
					"name": "user-friends",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "auth_token",
								"value": "b49tZ1q2AhXQiTx67CSQQvj73",
								"type": "text"
							},
							{
								"key": "user_id",
								"value": "1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{user-service-endpoint}}/2/friends",
							"host": [
								"{{user-service-endpoint}}"
							],
							"path": [
								"2",
								"friends"
							]
						},
						"description": "Get list of all friends of the user with supplied ID from path variable `/{userId}/friends`\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "user-add",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "auth_token",
								"value": "b49tZ1q2AhXQiTx67CSQQvj73",
								"type": "text"
							},
							{
								"key": "user_id",
								"value": "1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{user-service-endpoint}}/2/add",
							"host": [
								"{{user-service-endpoint}}"
							],
							"path": [
								"2",
								"add"
							]
						},
						"description": "Add a user as friend: `/{userId}/add`\n\n*   Path var `{userId}`: User to add as friend\n*   Headers required:\n    *   `user_id` of logged in user\n    *   `auth_token` of logged in user"
					},
					"response": []
				}
			],
			"description": "Service handling methods for user related actions. Hosted on `/v1/user-service`"
		},
		{
			"name": "auth-service",
			"item": [
				{
					"name": "login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "user_handle",
								"value": "username123",
								"type": "text"
							},
							{
								"key": "password",
								"value": "password123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth-service-endpoint}}/login",
							"host": [
								"{{auth-service-endpoint}}"
							],
							"path": [
								"login"
							]
						},
						"description": "Meant for use by front end client to login a user. Only required once per session. Takes required params from header."
					},
					"response": []
				},
				{
					"name": "getauthtoken",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "user_handle",
								"value": "username123",
								"type": "text"
							},
							{
								"key": "password",
								"value": "password123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{auth-service-endpoint}}/getauthtoken",
							"host": [
								"{{auth-service-endpoint}}"
							],
							"path": [
								"getauthtoken"
							]
						},
						"description": "Use to re-authenticate a user on token expiry. Meant for use by front-end client. Fetches parameters from the header values."
					},
					"response": []
				},
				{
					"name": "isauthvalid",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": 1,\r\n    \"auth_token\": \"L7n0egIkOnwDoC8XQuDZ6xLtE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth-service-endpoint}}/isauthvalid",
							"host": [
								"{{auth-service-endpoint}}"
							],
							"path": [
								"isauthvalid"
							]
						},
						"description": "Meant for internal synchronous communication. Validates user credentials provided in the JSON payload from the DB. Returns `true` or `false`."
					},
					"response": []
				},
				{
					"name": "logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "user_id",
								"value": "2",
								"type": "text"
							},
							{
								"key": "auth_token",
								"value": "s3wkjfnow3f8h9ounw30pghin",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth-service-endpoint}}/logout",
							"host": [
								"{{auth-service-endpoint}}"
							],
							"path": [
								"logout"
							]
						},
						"description": "Meant for use by front-end client to logout user and clear credentials from the database."
					},
					"response": []
				}
			],
			"description": "This service handles authorization methods, used by all other services for their respective methods. Hosted on `/v1/auth-service`"
		},
		{
			"name": "notification-service",
			"item": [
				{
					"name": "user-notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "auth_token",
								"value": "ZX9reEKTbKBXA6lLLQuHvITV3",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{notification-service-endpoint}}/1",
							"host": [
								"{{notification-service-endpoint}}"
							],
							"path": [
								"1"
							]
						},
						"description": "Get all notifications for user with user ID fetched from path variable `/{userId}`. Requires authentication params from header."
					},
					"response": []
				}
			],
			"description": "This service asynchronously communicates with the post and user service for notifications on adding a friend or liking a post respectively. This is achieved by using RabbitMQ as a message broker. Hosted at `/v1/notif-service`"
		},
		{
			"name": "post-service",
			"item": [
				{
					"name": "all",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{post-service-endpoint}}/all",
							"host": [
								"{{post-service-endpoint}}"
							],
							"path": [
								"all"
							]
						},
						"description": "Get all posts done on the platform"
					},
					"response": []
				},
				{
					"name": "get-single-post",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{post-service-endpoint}}/3",
							"host": [
								"{{post-service-endpoint}}"
							],
							"path": [
								"3"
							]
						},
						"description": "Get single post details with post ID fetched from path variable `/{postId}`"
					},
					"response": []
				},
				{
					"name": "add",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "auth_token",
								"value": "b49tZ1q2AhXQiTx67CSQQvj73",
								"type": "text"
							},
							{
								"key": "user_id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"content\": \"This is an example post on SOA-cil!\",\r\n  \"user_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{post-service-endpoint}}/add",
							"host": [
								"{{post-service-endpoint}}"
							],
							"path": [
								"add"
							]
						},
						"description": "Create a new post from model provided in request payload. Requires authentication from request headers."
					},
					"response": []
				},
				{
					"name": "post-like",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "auth_token",
								"value": "fKccklDWt2KsHRIaOuwYH1H1W",
								"type": "text"
							},
							{
								"key": "user_id",
								"value": "1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{post-service-endpoint}}/3/like",
							"host": [
								"{{post-service-endpoint}}"
							],
							"path": [
								"3",
								"like"
							]
						},
						"description": "Like an existing post with post ID fetched from path variable `{postId}/like` Requires authentication params from request headers."
					},
					"response": []
				},
				{
					"name": "post-update",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "auth_token",
								"value": "b49tZ1q2AhXQiTx67CSQQvj73",
								"type": "text"
							},
							{
								"key": "user_id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"content\": \"This is an example post - updated!\",\r\n  \"user_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{post-service-endpoint}}/3/update",
							"host": [
								"{{post-service-endpoint}}"
							],
							"path": [
								"3",
								"update"
							]
						},
						"description": "Update an existing post with ID fetched from path variable `/{postId}/update`. Requires authentication parameters from request headers."
					},
					"response": []
				},
				{
					"name": "delete-post",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "auth_token",
								"value": "b49tZ1q2AhXQiTx67CSQQvj73",
								"type": "text"
							},
							{
								"key": "user_id",
								"value": "1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{post-service-endpoint}}/13",
							"host": [
								"{{post-service-endpoint}}"
							],
							"path": [
								"13"
							]
						},
						"description": "Delete an existing post with post ID fetched from path variable `/{postId}`. Requires authentication parameters from request headers."
					},
					"response": []
				}
			],
			"description": "This service handles all actions related to posts such as create new, update, like, delete and get posts. Hosted on `/v1/post-service`"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "auth-service-endpoint",
			"value": "http://localhost:9090/v1/auth-service",
			"type": "string"
		},
		{
			"key": "notification-service-endpoint",
			"value": "http://localhost:9091/v1/notification-service",
			"type": "string"
		},
		{
			"key": "post-service-endpoint",
			"value": "http://localhost:9092/v1/post-service",
			"type": "string"
		},
		{
			"key": "user-service-endpoint",
			"value": "http://localhost:9093/v1/user-service",
			"type": "string"
		}
	]
}